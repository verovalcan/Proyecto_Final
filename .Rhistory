dr<-dredge(m9, rank = AICc)
AIC(m5,m9)
#El modelo m9 tiene AIC ligeramente menor y biologicamente tiene un poco mas de sentido
summary(m9)
# Comparar AIC
AIC(m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10)
summary(m1)
library(sjPlot)
# Visualizar efectos aleatorios
sjp.glmer(m5,
facet.grid = F,
sort = "sort.all",
type = "re",
y.offset = .4)
plot_model(m9, type = "pred",
terms = c("MeanVelViento", "MeanDirViento"))
#El modelo m9 tiene AIC ligeramente menor y biologicamente tiene un poco mas de sentido
summary(m9)
str(dat)
plot_model(m9, type = "pred")
plot_model(m9, type = "pred",
+           terms = c("MeanVelViento", "MeanDirViento"))
plot_model(m9, type = "pred",
terms = c("MeanVelViento", "MeanDirViento"))
plot_model(m9, type = "pred",
terms = c("MeanVelViento[all]", "MeanDirViento"))
plot_model(m9, type = "pred",
terms = c("MeanVelViento[all]", "MeanDirViento", "MeanTemp"))
plot_model(m9, type = "pred",
terms = c("MeanTemp","MeanVelViento[all]", "MeanDirViento"))
plot_model(m9, type = "pred",
terms = c("MeanTemp[all]","MeanVelViento[all]", "MeanDirViento"))
plot_model(m9, type = "pred",
terms = c("MeanTemp[all]","MeanVelViento", "MeanDirViento"))
plot_model(m9, type = "pred",
terms = c("MeanVelViento[all]", "MeanDirViento"))
plot_model(m9, type = "pred",
terms = c("MeanTemp"))
#El modelo m9 tiene AIC ligeramente menor y biologicamente tiene un poco mas de sentido
summary(m9)
plot_model(m9, type = "pred")
plot_model(m9, type = "pred",
terms = c("MeanTemp", "MeanVelViento"))
plot_model(m9, type = "pred",
terms = c("MeanTemp", "MeanDirViento"))
par(mfrow=c(2,2))
plot_model(m9, type = "pred")
par(mfrow=c(2,2))
plot_model(m9, type = "pred", terms = "MeanTemp")
plot_model(m9, type = "pred", terms = "MeanDirViento")
dev.off()
par(mfrow=c(2,2))
plot_model(m9, type = "pred", terms = "MeanTemp")
plot_model(m9, type = "pred", terms = "MeanDirViento")
plot_model(m9, type = "pred", terms = "MeanVelViento")
plot_model(m9, type = "pred", terms = "year")
get_model_data(m9, typw="pred")
get_model_data(m9, type="pred"`)
get_model_data(m9, type="pred")
sr <- simulateResiduals(fittedModel = m9, plot = T)
plot_model(m9, type = "resid", terms = "MeanTemp")
plot_model(m9, type = "resid", terms = "MeanDirViento")
plot_model(m9, type = "diag", terms = "MeanTemp")
plot_model(m9, type = "pred", terms = "year")
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", show.data = TRUE, grid = FALSE)
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = FALSE)
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = TRUE)
FALSE
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = FALSE)
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = FALSE)+theme_sjplot()
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = FALSE)+theme_sjplot2()
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = FALSE)+theme_blank()
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = FALSE)+theme_bw()
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = FALSE)+theme_blank(geom.outline.size = 1)
plot_model(m9, type = "pred", terms = "MeanTemp", title = "Probabilidad de presencia segun la temperatura de BSE", axis.title = c("Temperatura (°C)", "Probabilidad de presencia (%)"), colors="red", grid = FALSE)+theme_classic()
plot_model(m9, type = "pred", terms = "MeanDirViento" title = "Probabilidad de presencia segun la direccion del viento en BSE", axis.title = c("Direccion del viento (grados)", "Probabilidad de presencia (%)"))+theme_classic()
plot_model(m9, type = "pred", terms = "MeanDirViento", title = "Probabilidad de presencia segun la direccion del viento en BSE", axis.title = c("Direccion del viento (grados)", "Probabilidad de presencia (%)"))+theme_classic()
plot_model(m9, type = "pred", terms = "MeanDirViento", title = "Probabilidad de presencia segun la direccion del viento en BSE", axis.title = c("Direccion del viento (grados)", "Probabilidad de presencia (%)"), axis.labels = c("NE","","","","SE"))+theme_classic()
exl<-c("NE","","","","SE")
plot_model(m9, type = "pred", terms = "MeanDirViento", title = "Probabilidad de presencia segun la direccion del viento en BSE", axis.title = c("Direccion del viento (grados)", "Probabilidad de presencia (%)"), axis.labels = "exl")+theme_classic()
plot_model(m9, type = "pred", terms = "MeanDirViento", title = "Probabilidad de presencia segun la direccion del viento en BSE", axis.title = c("Direccion del viento (grados)", "Probabilidad de presencia (%)"), auto.label = FALSE, axis.labels = "exl")+theme_classic()
plot_model(m9, type = "pred", terms = "MeanDirViento", title = "Probabilidad de presencia segun la direccion del viento en BSE", axis.title = c("Direccion del viento (grados)", "Probabilidad de presencia (%)"))+theme_classic()
plot_model(m9, type = "pred", terms = "MeanVelViento", title = "Probabilidad de presencia segun la velocidad del viento en BSE", axis.title = c("Velocidad del viento (m/s)", "Probabilidad de presencia (%)"))+theme_classic()
plot_model(m9, type = "pred", terms = "year", title = "Probabilidad de presencia segun el año en BSE", axis.title = c("Año", "Probabilidad de presencia (%)"))+theme_classic()
plot_model(m9, type = "pred", terms = c("MeanVelViento[all]", "MeanDirViento"), title = "Probabilidad de presencia segun la velocidad y direccion del viento en BSE", axis.title = c("Velocidad del viento (grados)", "Probabilidad de presencia (%)"))+theme_classic()
plot_model(m9, type = "pred", terms = c("MeanVelViento[all]", "MeanDirViento"), title = "Probabilidad de presencia segun la velocidad y direccion del viento en BSE", axis.title = c("Velocidad del viento (grados)", "Probabilidad de presencia (%)"), legend.title = "Direccion del viento (grados)" )+theme_classic()
plot_model(m9, type = "pred", terms = c("MeanVelViento[all]", "MeanDirViento"), title = "Probabilidad de presencia segun la velocidad y direccion del viento en BSE", axis.title = c("Velocidad del viento (grados)", "Probabilidad de presencia (%)"), legend.title = "Dir. viento (°)" )+theme_classic()
#El modelo m9 tiene AIC ligeramente menor y biologicamente tiene un poco mas de sentido
summary(m9)
#tomamos solo los datos para el periodo de estudio
#Posicion para dia de inicio y final
avtemp$Date[38] #Posicion 38
dets[c(1:3,27:30,681:684),]
plot_model(m9, type = "pred", terms = c("MeanTemp[all]", "year"), title = "Probabilidad de presencia segun la velocidad y direccion del viento en BSE", axis.title = c("Velocidad del viento (grados)", "Probabilidad de presencia (%)"), legend.title = "Dir. viento (°)" )+theme_classic()
setwd("C:/Users/verov/Documents/UCR/2020/IICiclo/Investigacion_Reproducible/Proyecto_Final")
wd1 <- getwd()
setwd(wd1)
setwd(wd1)
#Exportar bases de datos
SSTMP<-read.csv("SST_MP.csv", header = T, sep = ",")
dim(SSTMP)
SSTMP[c(1,10945),1)
SSTMP[c(1,10945),1]
SSTMP[c(2,10945),1]
TempMP<-read.csv("Matapalito.csv", header=T, sep= ",")
dim(TempMP)
TempMP[c(1,153342),]
setwd("C:/Users/verov/Documents/UCR/2020/IICiclo/Investigacion_Reproducible/Proyecto_Final")
wd1 <- getwd()
setwd(wd1)
SSTMP<-read.csv("SST_MP.csv", header = T, sep = ",")
SSTREF<-read.csv("SST_REF.csv", header = T, sep = ",")
#explorarcion inicial
head(SSTMP)
str(SSTMP)
dim(SSTMP)
head(SSTREF)
str(SSTREF)
dim(SSTREF)
TempMP<-read.csv("Matapalito.csv", header=T, sep= ",")
#Exploracion Inicial
head(TempMP)
str(TempMP)
dim(TempMP)
library(chron)
library(dplyr)
SSTMP<-SSTMP[-1,] #Eliminar fila 1 que es parte del encabezado
SSTREF<-SSTREF[-1,]
#dar formato a las fechas
SSTMP$time<-as.POSIXlt(strptime(as.character(SSTMP$time), "%Y-%m-%dT%H:%M:%S"))
SSTREF$time<-as.POSIXlt(strptime(as.character(SSTREF$time), "%Y-%m-%dT%H:%M:%S"))
SSTMP$date<-as.factor(paste(format(SSTMP$time, format="%Y"),format(SSTMP$time, format="%m"),
format(SSTMP$time, format="%d"), sep="-"))
SSTREF$date<-as.factor(paste(format(SSTREF$time, format="%Y"),format(SSTREF$time, format="%m"),
format(SSTREF$time, format="%d"), sep="-"))
SSTMP[SSTMP$analysed_sst=="NaN",4]=NA
SSTREF[SSTREF$analysed_sst=="NaN",4]=NA
head(SSTMP)
str(SSTMP)
head(SSTREF)
str(SSTREF)
SSTMP$analysed_sst<-as.numeric(SSTMP$analysed_sst)
SSTREF$analysed_sst<-as.numeric(SSTREF$analysed_sst)
avSSTMP<- aggregate(analysed_sst ~date, data=SSTMP, FUN = mean)
avSSTREF<- aggregate(analysed_sst ~date, data=SSTREF, FUN = mean)
head(avSSTMP)
head(avSSTREF)
avSSTMP$seven_day_index <- c(0, rep(1:(nrow(avSSTMP)-1)%/%7)) #agrupar x semana
SSTMPmin<-group_by(avSSTMP, seven_day_index) %>%
summarise(min_sst = min(analysed_sst))
avSSTREF$seven_day_index <- c(0, rep(1:(nrow(avSSTREF)-1)%/%7))
SSTREFmax<-group_by(avSSTREF, seven_day_index) %>%
summarise(max_sst = max(analysed_sst))
head(SSTMPmin)
dim(SSTMPmin)
head(SSTREFmax)
dim(SSTREFmax)
SSTwk<-merge(SSTMPmin,SSTREFmax, by="seven_day_index")
head(SSTwk)
#indice
SSTwk$UI<-SSTwk$max_sst-SSTwk$min_sst
head(SSTwk)
TempMP$Date<-as.factor(TempMP$Date)
avTempMP<-aggregate(Temp ~Date, data=TempMP, FUN = mean)
head(avTempMP)
dim(avTempMP)
head(avTempMP)
View(TempMP)
#Formato de fecha para ordenarlo
avTempMP$Date<-as.POSIXlt(strptime(as.character(avTempMP$Date), "%m-%d-%Y"))
head(avTempMP)
head(avTempMP)
avTempMP<-aggregate(Temp ~Date, data=TempMP, FUN = mean)
head(avTempMP)
#Formato de fecha para ordenarlo
avTempMP$Date<-as.POSIXlt(strptime(as.character(avTempMP$Date), "%m/%d/%Y"))
head(avTempMP)
head(avTempMP)
avTempMP[order(Date),]
avTempMP[order(avTempMP$Date),]
head(avTempMP)
str(avTempMP)
avTempMP[order(as.Date(avTempMP$Date)),]
head(avTempMP)
arrange(avTempMP, Date)
avTempMP<-arrange(avTempMP, Date)
head(SSTREFmax)
tail(SSTREFmax)
avSSTREF<- aggregate(analysed_sst ~date, data=SSTREF, FUN = mean)
tail(avSSTREF)
avTempMP<- avTempMP[1:avTempMP$Date== "2020-06-30",]
head(avTempMP)
head(avTempMP)
avTempMP<- avTempMP[1:avTempMP$Date== 2020-06-30,]
avTempMP$Date == 2020-06-30
avTempMP$Date[1000]
head(avTempMP)
dim(avTempMP)
avTempMP$Date[500]
head(avTempMP)
avTempMP$Date[657]
avTempMP$Date[620]
avTempMP$Date[619]
avTempMP<- avTempMP[1:619,]
head(avSSTREF)
avSSTREF$seven_day_index <- c(0, rep(1:(nrow(avSSTREF)-1)%/%7))
avSSTREF
head(avSSTREF)
head(avSSTREF)
head(avTempMP)
head(avTempMP)
dim(avTempMP)
head(avSSTREF)
avSSTREF[180,1]
avSSTREF[270,1]
avSSTREF[251,1]
dim(avSSTREF)
avSSTREF2<-avSSTREF[251:912,]
dim(avSSTREF2)
head(avSSTREF2)
head(avTempMP)
head(avTempMP)
tail(avSSTREF2)
tail(avTempMP)
dim(avTempMP)
dim(avSSTREF2)
IAinsitu<-merge(avSSTREF, avTempMP, all.y=T)
head(IAinsitu)
str(avSSTREF)
head(avSSTREF)
avSSTREF$date <- as.POSIXlt(strptime(as.character(avTempMP$Date), "%Y-%m-%d"))
avSSTREF$date <- as.POSIXlt(strptime(as.character(avSSTREF$Date), "%Y-%m-%d"))
avSSTREF$date <- as.POSIXlt(strptime(as.character(avSSTREF$date), "%Y-%m-%d"))
colnames(avSSTREF)<- c("Date", "Ref_SST", "seven_day_index")
IAinsitu<-merge(avSSTREF, avTempMP, all.y=T)
head(IAinsitu)
rm(IAinsitu)
allTemp<-merge(avSSTREF, avTempMP, all.y=T)
head(allTemp)
#Exploracion Inicial
head(TempMP)
str(TempMP)
dim(TempMP)
#Promedios diarios
TempMP$Date<-as.factor(TempMP$Date)
avTempMP<-aggregate(Temp ~Date, data=TempMP, FUN = mean)
head(avTempMP)
#Formato de fecha para ordenarlo
avTempMP$Date<-as.POSIXlt(strptime(as.character(avTempMP$Date), "%m/%d/%Y"))
head(avTempMP)
dim(avTempMP)
avTempMP<-arrange(avTempMP, Date)
#Eliminar datos despues de datos satelitales
avTempMP<- avTempMP[1:619,]
head(avTempMP)
dim(avTempMP)
#Llamar datos de referencia y ajustar para que calcen con los in situ
head(avSSTREF)
avSSTREF$date <- as.POSIXlt(strptime(as.character(avSSTREF$date), "%Y-%m-%d"))
head(allTemp)
Tempwk<-group_by(allTemp, seven_day_index) %>%
summarise(min_insitu = min(Temp)) %>%
summarise(max_sst = max(Ref_SST))
head(allTemp)
str(allTemp)
minTemp<-group_by(allTemp, seven_day_index) %>%
summarise(min_insitu = min(Temp))
minTemp<-group_by(allTemp[,3:4], seven_day_index) %>%
summarise(min_insitu = min(Temp))
SSTMPmin
avSSTMP
head(allTemp)
group_by(allTemp[,3:4], seven_day_index)
allTemp
summarise(min_insitu = min(Temp))
minTemp<-group_by(allTemp[,3:4], seven_day_index) %>%
summarise(min_insitu = min(Temp))
minTemp<-group_by(allTemp[,3:4], seven_day_index) %>%
summarise(min_insitu = min(allTemp$Temp))
minTemp<-group_by(allTemp[,3:4], seven_day_index) %>%
summarise(min_insitu = min(minTemp$Temp))
maxTemp<-group_by(allTemp, seven_day_index) %>%
summarise(max_sst = max(Ref_SST))
head(minTemp)
minTemp<-group_by(allTemp[,3:4], seven_day_index) %>%
summarise(mean_insitu = mean(Temp))
head(minTemp)
minTemp<-group_by(allTemp[,3:4], seven_day_index) %>%
summarise(min_insitu = min(Temp))
head(minTemp)
head(maxTemp)
Tempwk<-group_by(allTemp, seven_day_index) %>%
+   summarise(min_insitu = min(Temp)) %>%
+   summarise(max_sst = max(Ref_SST))
Tempwk<-group_by(allTemp, seven_day_index) %>%
summarise(min_insitu = min(Temp)) %>%
summarise(max_sst = max(Ref_SST))
Tempwk<-group_by(allTemp, seven_day_index) %>%
summarise(min_insitu = min(Temp)) %>%
summarise(max_sst = max(allTemp$Ref_SST))
head(Tempwk)
rm(Tempwk)
#Base de datos semanales
Tempwk<-merge(minTemp,maxTemp, by="seven_day_index")
head(Tempwk)
#indice
Tempwk$UI<-Tempwk$max_sst-Tempwk$min_insitu
head(Tempwk)
avSSTMP$month <- format(avSSTMP$time, format="%m")
avSSTMP$month <- paste(format(avSSTMP$time, format="%m"),format(avSSTMP$time, format="%m")) #columna de mes y año
head(avSSTMP$month)
head(avSSTMP)
avSSTMP$month <- paste(format(avSSTMP$time, format="%m"),format(avSSTMP$time, format="%m"), sep = "-") #columna de mes y año
head(avSSTMP)
avSSTMP$month <- paste(format(avSSTMP$date, format="%m"),format(avSSTMP$date, format="%m"), sep = "-") #columna de mes y año
head(avSSTMP)
format(avSSTMP$date, format="%m")
str(avSSTMP)
head(avSSTMP)
avSSTMP<-as.POSIXlt(strptime(as.character(avSSTMP$date), "%Y-%m-%d"))
avSSTMP$month <- paste(format(avSSTMP$date, format="%m"),format(avSSTMP$date, format="%m"), sep = "-") #columna de mes y año
head(avSSTMP)
avSSTMP<- aggregate(analysed_sst ~date, data=SSTMP, FUN = mean)
avSSTMP$seven_day_index <- c(0, rep(1:(nrow(avSSTMP)-1)%/%7)) #agrupar x semana
avSSTMP$date<-as.POSIXlt(strptime(as.character(avSSTMP$date), "%Y-%m-%d"))
head(avSSTMP)
avSSTMP$month <- paste(format(avSSTMP$date, format="%m"),format(avSSTMP$date, format="%m"), sep = "-") #columna de mes y año
head(avSSTMP)
avSSTMP$month <- paste(format(avSSTMP$date, format="%m"),format(avSSTMP$date, format="%Y"), sep = "-") #columna de mes y año
head(avSSTMP)
mSSTMPmin<-group_by(avSSTMP, month) %>%
summarise(min_sst = min(analysed_sst))
head(mSSTMPmin)
avSSTREF$date<-as.POSIXlt(strptime(as.character(avSSTREF$date), "%Y-%m-%d"))
head(avSSTREF)
avSSTREF$Date<-as.POSIXlt(strptime(as.character(avSSTREF$Date), "%Y-%m-%d"))
avSSTREF$month <- paste(format(avSSTREF$Date, format="%m"),format(avSSTREF$Date, format="%Y"), sep = "-") #columna de mes y año
mSSTREFmax<-group_by(avSSTREF,month) %>%
summarise(max_sst = max(analysed_sst))
mSSTREFmax<-group_by(avSSTREF,month) %>%
summarise(max_sst = max(Ref_SST))
head(mSSTMPmin)
dim(mSSTMPmin) #131 semanas, correcto para el periodo
head(mSSTREFmax)
dim(mSSTREFmax)
#Base de datos semanales
SSTm<-merge(mSSTMPmin,mSSTREFmax, by="month")
head(SSTm)
#indice
SSTm$UI<-SSTm$max_sst-SSTm$min_sst
head(SSTm)
head(avTempMP)
head(avTempMP)
avTempMP$month <- paste(format(avTempMP$Date, format="%m"),format(avTempMP$Date, format="%Y"), sep = "-") #columna de mes y año
mTempMPmin<-group_by(avTempMP, month) %>%
summarise(min_insitu = min(Temp))
dim(mTempMPmin)
#Base de datos mensuales
TempM<-merge(mTempMP, mSSTREFmax, by="month", all.y= F)
#Base de datos mensuales
TempM<-merge(mTempMPmin, mSSTREFmax, by="month", all.y= F)
head(TempM)
dim(TempM)
head(TempM)
#indice
TempM$UI<-TempM$max_sst-TempM$min_insitu
head(TempM)
head(SSTwk)
head(Tempwk)
head(SSTm)
wkUI<- ggplot(SSTwk, aes(UI, seven_day_index)) +
geom_line(color = "black", cex = 2.5, alpha = 0.2) +
geom_line(Tempwk, aes(UI, seven_day_index), color = "red") +
labs(title = "Indice de afloramiento semanal") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
ggplot(SSTwk, aes(UI, seven_day_index))
ggplot(SSTwk, aes(UI, seven_day_index)) +
geom_line(color = "black", cex = 2.5, alpha = 0.2)
ggplot(SSTwk, aes(UI, seven_day_index)) +
geom_line(color = "black", cex = 1.5)
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5)
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_line(Tempwk, aes(seven_day_index, UI), color = "red")
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_line(Tempwk, aes(UI), color = "red")
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_step(data= Tempwk, aes(UI), color = "red")
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_step(data= Tempwk, aes(UI, seven_day_index), color = "red")
ggplot(Tempwk, aes(seven_day_index, UI))+geom_line
ggplot(Tempwk, aes(seven_day_index, UI))+geom_line()
dim(Tempwk)
Tempwk$seven_day_index
SSTwk$seven_day_index
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_step(data= Tempwk, aes(seven_day_index, UI), color = "red")
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_step(data= Tempwk, aes(seven_day_index, UI), color = "red")
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_line(data= Tempwk, aes(seven_day_index, UI), color = "red")
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_line(data= Tempwk, aes(seven_day_index, UI), color = "red") +
labs(title = "Indice de afloramiento semanal") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_line(data= Tempwk, aes(seven_day_index, UI), color = "red") +
labs(title = "Indice de afloramiento semanal") +
xlab("Semanas")+
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
wkUI<- ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_line(data= Tempwk, aes(seven_day_index, UI), color = "red") +
labs(title = "Indice de afloramiento semanal") +
xlab("Semanas")+
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
wkUI
ggplot(SSTwk, aes(seven_day_index, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_line(data= Tempwk, aes(seven_day_index, UI), color = "red") +
labs(title = "Indice de afloramiento semanal") +
xlab("Semanas")+
theme(plot.title = element_text(hjust = 1)) +
theme_classic()
wkUI
mUI<- ggplot(SSTm, aes(month, UI)) +
geom_line(color = "black", cex = 1.5) +
geom_line(data= TempM, aes(month, UI), color = "red") +
labs(title = "Indice de afloramiento semanal") +
xlab("Fecha")+
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
mUI
ggplot(SSTm, aes(month, UI))
ggplot(SSTm, aes(month, UI)) +
geom_line(color = "black", cex = 1.5)
head(SSTm)
ggplot(SSTm, aes( UI))
str(SSTm)
SSTm$month<-as.factor(SSTm$month)
ggplot(SSTm, aes(month, UI))
ggplot(SSTm, aes(month, UI)) +
geom_line(color = "black", cex = 1.5)
ggplot(SSTm, aes(month, UI)) +
geom_point(color = "black", cex = 1.5)
SSTm$month<-as.Date(SSTm$month)
SSTm$month<-as.POSIXlt(strptime(as.character(SSTm$month), "%m-%Y"))
ggplot(SSTm, aes(month, UI)) +
geom_line(color = "black", cex = 1.5)
SSTm$month<-as.POSIXct(SSTm$month,origin = "1960/01/01",tz = "UTC"))
SSTm$month<-as.POSIXct(SSTm$month,origin = "1960/01/01",tz = "UTC")
ggplot(SSTm, aes(month, UI)) +
geom_line(color = "black", cex = 1.5)
SSTm$month<-as.numeric(SSTm$month)
ggplot(SSTm, aes(month, UI)) +
geom_line(color = "black", cex = 1.5)
SSTm$month<-as.factor(SSTm$month)
SSTm$month<-as.POSIXlt(strptime(as.character(SSTm$month), "%m-%Y"))
SSTm$month<-as.POSIXct(SSTm$month,origin = "1960/01/01",tz = "UTC")
ggplot(SSTm, aes(month, UI)) +
geom_line(color = "black", cex = 1.5)
ggplot(SSTm, aes(month, UI)) +
geom_path(color = "black", cex = 1.5)
SSTm$month<-as.numeric(SSTm$month)
ggplot(SSTm, aes(month, UI)) +
geom_path(color = "black", cex = 1.5)
SSTm$month<-as.factor(SSTm$month)
ggplot(SSTm, aes(month, UI)) +
geom_point(color = "black", cex = 1.5)
SSTm$month<-as.factor(SSTm$month)
SSTm$month
#Base de datos semanales
SSTm<-merge(mSSTMPmin,mSSTREFmax, by="month")
head(SSTm)
str(SSTm)
ggplot(SSTm, aes(month, UI)) +
geom_point(color = "black", cex = 1.5)
#indice
SSTm$UI<-SSTm$max_sst-SSTm$min_sst
ggplot(SSTm, aes(month, UI)) +
geom_point(color = "black", cex = 1.5)
ggplot(SSTm, aes(month, UI)) +
geom_path(color = "black", cex = 1.5)
ggplot(SSTm, aes(month, UI)) +
geom_point(color = "black", cex = 1.5)
str(SSTm)
SSTm$month<-as.factor(SSTm$month)
ggplot(SSTm, aes(month, UI)) +
geom_point(color = "black", cex = 1.5)
ggplot(SSTm, aes(month, UI)) +
geom_point(color = "black", cex = 1.5) +
geom_point(data= TempM, aes(month, UI), color = "red")
ggplot(SSTm, aes(month, UI)) +
geom_point(color = "black", cex = 1.5) +
geom_point(data= TempM, aes(month, UI), color = "red") +
labs(title = "Indice de afloramiento mensual") +
xlab("Fecha")+
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic()
